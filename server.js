const express = require('express');
const { Deepgram } = require('@deepgram/sdk');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 3000;

const deepgram = new Deepgram(process.env.DG_KEY);

app.use(express.static('public'));
app.use(express.json());

app.post('/summarize', async (req, res) => {
  console.log('Received summarization request');
  try {
    const { text } = req.body;
    
    if (!text || text.trim().length === 0) {
      console.log('Empty text received for summarization');
      return res.status(400).json({ error: 'Empty text provided' });
    }

    console.log(`Summarizing text: ${text.substring(0, 100)}...`); // Log the first 100 characters

    const source = {
      buffer: Buffer.from(text),
      mimetype: 'text/plain',
    };

    const response = await deepgram.transcription.preRecorded(source, {
      smart_format: true,
      summarize: true,
    });

    if (!response.results || !response.results.summary) {
      console.log('No summary generated by Deepgram');
      return res.status(500).json({ error: 'Failed to generate summary' });
    }

    const summary = response.results.summary.short;
    console.log(`Generated summary: ${summary}`);
    res.json({ summary });
  } catch (error) {
    console.error('Error in summarization:', error);
    res.status(500).json({ error: 'Failed to generate summary', details: error.message });
  }
});

app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});